How to build the avatar project for iOS

Used software:
- Xcode 4.6.2 (4H1003) and iOS SDK 6.1 from the Mac App Store or
  https://developer.apple.com/xcode/
- git 1.8.3 from HomeBrew (http://mxcl.github.com/homebrew/) or
  http://git-scm.com/
- CocoaPods 0.20.2 from http://cocoapods.org/
  (optional, only required when it's necessary to update the libraries that the
  project depends on)
- XcodeColors from https://github.com/robbiehanson/XcodeColors (optional,
  to colorize the logs)

The following tools are used to compress JS&CSS files:
- Java Runtime Environment 1.6.0_37 (http://java.oracle.com/)
- Closure Compiler 20120710 (revision 2079) from
  http://code.google.com/p/closure-compiler/
- YUI Compressor 2.4.7 from http://developer.yahoo.com/yui/compressor/

Used external libraries:
- CocoaAsyncSocket (7.2.2): https://github.com/robbiehanson/CocoaAsyncSocket
- CocoaLumberjack (1.6): https://github.com/robbiehanson/CocoaLumberjack
- JSONKit (1.5pre): https://github.com/johnezang/JSONKit
- GHUnitIOS (0.5.5): https://github.com/gabriel/gh-unit/
- OCMock (2.0.1): http://ocmock.org/

Used libraries:
- MessageBroker (built within the workspace)

Preparations:
1. Make sure JRE is installed, for JS&CSS compressing.
1.1. Download Closure Compiler, rename the jar file to `js_compiler.jar`, put it
  into `bin/` directory in the repository's root.
1.2. Download YUI Compressor, rename the jar file to `yuicompressor.jar`, put it
  into `bin/` directory in the repository's root.
  (These paths are specified in the `native/ios/src/compress.sh` and
  `web/Makefile` scripts)
2. Clone the git repository: `git clone git@adc.luxoft.com:ava`
3. Get the videos.
3.1. Download English videos from
  `https://adc.luxoft.com/svn/AVA/doc/technical/content/output_from_Ford_3.5/English/MP4/`
  (e.g., with `svn checkout`).
  Copy the .mp4 video files (except for `FAQ_Welcome_orientation*.mp4` files)
  from that directory into the `web/src/video/` directory. Copy
  `FAQ_Welcome_orientation_IOS.mp4` into
  `web/src/video/FAQ_Welcome_orientation.mp4`.
3.2. For French videos, do the same as 3.1, but the videos are at
  `https://adc.luxoft.com/svn/AVA/doc/technical/content/output_from_Ford_3.5/French/MP4/`,
  and the target directory is `web/src/fr/video/`.
3.3. No Spanish videos yet.

  * Alternatively, you can use the `native/ios/src/update_videos.sh` script. The
  first parameter must point to the `output_from_Ford_3.5` directory containing
  `English` and `French` subdirectories. The second parameter must point to the
  `web/src` directory of the project. The third parameter is optional flags for
  rsync (for example, -n to dry run the process).
4. (optional) Install CocoaPods. Open the terminal, cd into the
  `native/ios/src/` directory, run `pod install`. This should update the
  `Pods/` directory with newer version of libraries.

There are multiple localizations of the app: English, French, and Spanish. For
each one there are three build schemes: regular (debug), adhoc, and release.
Therefore, in the build process below you should select the version you need:
avatar/avatar-french/avatar-spanish, avatar_adhoc/avatar_adhoc-french/
avatar_adhoc-spanish, or avatar_release/avatar_release-french/
avatar_release-spanish.

Build process:
1. Open `native/ios/src/avatar.xcworkspace` workspace in Xcode.
2. Depends on what you want:
  - To run/debug on device/simulator: select the avatar scheme in the topbar.
    Then click Product > Run (⌘R) in menu.
  - To prepare an adhoc build for testing: select the avatar_adhoc scheme > iOS
    Device, then Product > Archive. After a while, the Organizer - Archives
    window should open with the latest archive on top. Click Distribute… button,
    select Save for Enterprise or Ad-Hoc Deployment, click Next, select an iOS
    Distribution code signing identity, click Next. Then save the ipa file.
  - To prepare a release build for AppStore, select the avatar_release scheme >
    iOS Device, the Product > Archive. After a while, the Organizer - Archives
    window should open. Select the latest built archive, click Distribute…
    button, select Submit to the iOS App Store. Follow the guide.
    It's important to use an avatar_release scheme, because it turns off a few
    features for testing (look at [1] below).

The build process in Xcode builds all the required dependencies automatically.

NB! When the project is built in Adhoc/Release configurations (for example,
when archiving the product by default), all JS and CSS files are compressed and
minified with the help of `native/ios/src/compress.sh` and `web/Makefile`
scripts.


[1]: A few testing features are enabled in debug and adhoc builds:
- Long press gesture (2 seconds, 3 touches) on the splash screen resets the
  isFirstStart flag after relaunching.
- Right-to-left swipe gesture (2 touches) on the splash screen displays the
  launch time.
- Clicking on the top-left space of the screen, or the left space on the 4"
  iPhone screen, four times displays a popup with the app version, git branch
  and commit hash that were used to build the app, and build time.
- Clicking on the top-right space of the screen, or the right space on the 4"
  iPhone screen, four times displays a popup with memory usage information at
  certain checkpoints.

