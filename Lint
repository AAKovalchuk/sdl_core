#!/usr/bin/env bash

set -e

function print_usage {
	echo
	echo "Usage: Lint [FILE=file|ALL] BUILD_PATH=path [-v] [w0|w1|w2|w3|w4] [MISRA=ON|MISRA=OFF] [OUTDIR=path]"
	echo
	echo "\"FILE=file|ALL\" Sets the scope of linting"
	echo -e '\t' "FILE sets the scope to single \"file\" (path from root directory of git repository)"
	echo -e '\t' "ALL sets the scope to all project modules"
	echo -e '\t' "If none is set then localy changes files will be linted"
	echo
	echo "\"BUILD_PATH=path\" is the only mandatory parameter which sets"
	echo -e '\t' "the path to the build product directory"
	echo
	echo "\"-v\" Turns verbose mode on (off by default)"
	echo
	echo "\"w0|w1|w2|w3|w4\" sets the Warning level"
	echo -e '\t' "w0 - No messages (except for fatal errors)"
	echo -e '\t' "w1 - Error messages only -- no Warnings or"
	echo -e '\t' "Informationals."
	echo -e '\t' "w2 - Error and Warning messages only"
	echo -e '\t' "w3 - Error, Warning and Informational messages (this"
	echo -e '\t' "is the default)"
	echo -e '\t' "w4 - All messages."
	echo
	echo "\"MISRA=ON|MISRA=OFF\" Turns custom MISRA configuration ON"
	echo -e '\t' "and OFF respectively (OFF by defaul)"
	echo
	echo "\"OUTDIR=path\" is the path to save results"
	echo
	echo "Examples:"
	echo -e '\t' "./Lint BUILD_PATH=~/build/"
	echo -e '\t' "./Lint ALL BUILD_PATH=../build/ w1"
	echo
}


echo
echo "=========== Lint SMART DEVICE LINK project ==========="
echo

########################################################################
##### Process input arguments ##########################################
########################################################################

MISRA_ENABLED=false
WARNING_LEVEL=w3
SCOPE=LOCAL_CHANGES
BUILD_PATH=""
VERBOSE=false

if [ $# == 0 ] || [ ${1} == '-h' ] || [ ${1} == '--help' ]; then
	print_usage
	exit 0
fi

while test $# -gt 0; do
        case "$1" in
        MISRA=ON)
			MISRA_ENABLED=true
			shift
			;;
		MISRA=OFF)
			MISRA_ENABLED=false
			shift
			;;
		w0|w1|w2|w3|w4)
			WARNING_LEVEL=$1
			shift
			;;
		ALL)
			if [ "$SCOPE" != "LOCAL_CHANGES" ]; then
				echo "Wrong input. It is not allowed to use FILE and ALL at the same time"
				print_usage
				exit 1;
			fi
			SCOPE=ALL
			shift
			;;
		-v|--verbose)
			VERBOSE=true
			shift
			;;
		*)
			LHS=$(echo $1 | awk 'BEGIN { FS = "=" } ; { print $1 }')
			RHS=$(echo $1 | awk 'BEGIN { FS = "=" } ; { print $2 }')

			if [ ${LHS} == 'FILE' ]; then
				if [ "$SCOPE" != "LOCAL_CHANGES" ]; then
					echo "Wrong input. It is not allowed to use FILE and ALL at the same time"
					print_usage
					exit 1;
				fi

				if [ "${RHS}" == "" ]; then
					echo "Wrong input. Provide valid FILE value"
					print_usage
					exit 1;
				fi
				SCOPE=$LHS
				FILE_PATH=$RHS
			elif [ ${LHS} == 'BUILD_PATH' ]; then
				if [ "${RHS}" == "" ]; then
					echo "Wrong input. Provide valid BUILD_PATH value"
					print_usage
					exit 1;
				fi
				BUILD_PATH=$RHS
			elif [ ${LHS} == 'OUTDIR' ]; then
				if [ "${RHS}" == "" ]; then
					echo "Wrong input. Provide valid OUTDIR value"
					print_usage
					exit 1;
				fi
				OUTDIR=$RHS
			else
				echo "Wrong input"
				print_usage
				exit 1;
			fi
			shift
			;;
        esac
done

if [ "${BUILD_PATH}" == "" ]; then
	echo "Mandatory parameter BUILD_PATH is missing"
	print_usage
	exit 1;
fi


if [ "$SCOPE" == "LOCAL_CHANGES" ]; then
	echo -e '\t' "Lining scope is limitted to localy changed files"
elif [ "$SCOPE" == "FILE" ]; then
	echo -e '\t' "Lining scope is limitted to file " $FILE_PATH
elif [ "$SCOPE" == "ALL" ]; then

#	echo "You a going to Lint the whole project. It takes a lot of time."
#	echo -n "Are you sure? [Y/n] "

#	read item
#	case "$item" in
#		y|Y)
#			;;
#		n|N)
#			exit 0
#			;;
#		*)
#			exit 0
#			;;
#	esac

	echo -e '\t' "Lining scope is set to all project files"
fi

if $MISRA_ENABLED; then
	echo -e '\t' "MISRA is enabled"
else
	echo -e '\t' "MISRA is disabled"
fi

case "$WARNING_LEVEL" in
	w0)
		echo -e '\t' "Warning is set to " $WARNING_LEVEL " --- No messages (except for fatal errors)"
		;;
	w1)
		echo -e '\t' "Warning is set to " $WARNING_LEVEL " --- Error messages only -- no Warnings or Informationals."
		;;
	w2)
		echo -e '\t' "Warning is set to " $WARNING_LEVEL " --- Error and Warning messages only"
		;;
	w3)
		echo -e '\t' "Warning is set to " $WARNING_LEVEL " --- Error, Warning and Informational messages (this is the default)"
		;;
	w4)
		echo -e '\t' "Warning is set to " $WARNING_LEVEL " --- All messages."
		;;
esac

if $VERBOSE; then
	echo -e '\t' "Verbose mode is on"
fi

########################################################################
##### Configuring ######################################################
########################################################################

# +e900 Turns on Successful completion, 'Integer' messages produced, which is not by defaulf available in level w0-w3
# -e830 Turns off Info 831: Reference cited in prior message
# -e830 Turns off Info 830: Location cited in prior message
SUPPRESS="-e830 -e831 +e900"

OTHER_PARAMS="-dOS_POSIX"
MISRA_CONFIGURATION=""
SOURCE_CODE_PATH="src/components/can_cooperation src/components/functional_module"
EXCLUDE_FROM_SOURCE_CODE_PATH="src/components/qt_hmi/ src/components/dbus/ src/components/transport_manager/src/usb/qnx/ src/components/transport_manager/src/aoa src/components/transport_manager/src/mme src/components/transport_manager/src/pasa_bt"

echo
echo Configuring ...
echo =====================================
echo

dir=`dirname $0`
lint_bin=${dir}/tools/FlexeLint/bin
lint_config=${dir}/tools/FlexeLint/config
lint_result=${dir}/tools/FlexeLint/results


if [ -n "$OUTDIR" ]; then
	lint_result=$OUTDIR
fi

echo Lint results: ${lint_result}

rm -Rf ${lint_result}
mkdir -p ${lint_result}

if $MISRA_ENABLED; then
	MISRA_CONFIGURATION="au-misra-cpp.lnt"
fi

if [ "$SCOPE" == "ALL" ]; then
  SOURCE_CODE_PATH=${dir}/$(echo $SOURCE_CODE_PATH | awk "{gsub(/ /,\" ${dir}/\")}; 1")
  EXCLUDE_FROM_SOURCE_CODE_PATH=$(echo $EXCLUDE_FROM_SOURCE_CODE_PATH | awk '{gsub(/ /,"\\|")}; 1')
  find $SOURCE_CODE_PATH \( -name "*.cc" -o -name "*.cpp" \) | grep -v $EXCLUDE_FROM_SOURCE_CODE_PATH > ${lint_config}/sdl-modules.lnt
elif [ "$SCOPE" == "FILE" ]; then
  echo "${dir}/$FILE_PATH" > ${lint_config}/sdl-modules.lnt
elif [ "$SCOPE" == "LOCAL_CHANGES" ]; then
  SOURCE_CODE_PATH=$(echo $SOURCE_CODE_PATH | awk '{gsub(/ /,"\\|")}; 1')
  (git -C ${dir} diff --name-only HEAD ; git -C ${dir} ls-files --other --exclude-standard) | grep '.cc\|.cpp' | grep $SOURCE_CODE_PATH | awk "{ print \"${dir}/\" \$0 }" > ${lint_config}/sdl-modules.lnt
fi # if [ $CHECKSCOPE == "ALL" ]

find ${dir}/src -type d -name "*include*" | awk '{print "--i\"" $0 "\""}' > ${lint_config}/sdl-include-path.lnt
echo "--i\"${dir}/src/3rd_party\"" >> ${lint_config}/sdl-include-path.lnt
echo "--i\"${dir}/src/3rd_party-static/libusbx-1.0.16\"" >> ${lint_config}/sdl-include-path.lnt

(cd ${lint_config} && make -f co-gcc.mak > /dev/null)
echo "--i\"/usr/include/gstreamer-1.0\"" >> ${lint_config}/gcc-include-path.lnt
echo "--i\"/usr/include/glib-2.0\"" >> ${lint_config}/gcc-include-path.lnt
echo "--i\"/usr/lib/i386-linux-gnu/glib-2.0/include\"" >> ${lint_config}/gcc-include-path.lnt
echo "--i\"/usr/lib/x86_64-linux-gnu/glib-2.0/include\"" >> ${lint_config}/gcc-include-path.lnt
echo "--i\"/usr/include/dbus-1.0\"" >> ${lint_config}/gcc-include-path.lnt
echo "--i\"/usr/include/dbus-1.0\"" >> ${lint_config}/gcc-include-path.lnt
echo "--i\"/usr/lib/i386-linux-gnu/dbus-1.0/include\"" >> ${lint_config}/gcc-include-path.lnt
echo "--i\"/usr/lib/x86_64-linux-gnu/dbus-1.0/include\"" >> ${lint_config}/gcc-include-path.lnt

echo "-summary(${lint_result}/raw-flexelint-summary.txt)" >> ${lint_config}/sdl-main.lnt
echo "-i${lint_config}" >> ${lint_config}/sdl-main.lnt
echo "co-gcc.lnt" >> ${lint_config}/sdl-main.lnt
echo "smartdevicelink.lnt" >> ${lint_config}/sdl-main.lnt

########################################################################
##### Linting ##########################################################
########################################################################
FLINT_BINARY="Flint"

echo
echo Linting ...
echo =====================================
echo

if $VERBOSE; then
	${lint_bin}/${FLINT_BINARY} -$WARNING_LEVEL $SUPPRESS -zero -u --i$BUILD_PATH/src/components/ $OTHER_PARAMS $WORDSIZE ${lint_config}/sdl-main.lnt | tee ${lint_result}/raw-flexelint-report.txt
else
	${lint_bin}/${FLINT_BINARY} -$WARNING_LEVEL $SUPPRESS -zero -u --i$BUILD_PATH/src/components/ -os ${lint_result}/raw-flexelint-report.txt $OTHER_PARAMS $WORDSIZE ${lint_config}/sdl-main.lnt
fi

########################################################################
##### Preparing detailed report ########################################
########################################################################
if [ "$SCOPE" != "LOCAL_CHANGES" ]; then

	mkdir ${lint_result}/developers

	echo
	echo Preparing detailed report. Be patient
	echo =====================================
	echo

	git_repo=${dir}
	${lint_bin}/make_detailed_report ${git_repo} ${lint_result}

else
	echo
	echo "Detailed report for each developer won't be generated since"
	echo "only local changes are present in report"
	echo =====================================
	echo
fi

########################################################################
##### Cleaning-up ######################################################
########################################################################

function clean-up {
	echo
	echo Cleaning-up ...
	echo =====================================
	echo

	(cd ${lint_config} && make -f co-gcc.mak clean > /dev/null)
	rm ${lint_config}/sdl-modules.lnt
	rm ${lint_config}/sdl-include-path.lnt
	rm ${lint_config}/sdl-main.lnt
}

clean-up








